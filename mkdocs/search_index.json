{
    "docs": [
        {
            "location": "/",
            "text": "Index Page\n\n\nIntroduction\n\n\nThis page can be summed up in two lines:\n\n\n\n\nLinux is a cruel mistress and Embedded\nLinux is that bitch after a break up\n\n\n\n\nIf you understand the above quoate then let's start digging up some \nLinux Gold\n, and if you have not then this is not the right place for you please do yourself a favour and readup on Linux and it's relatives and come back with a \nstronger will\n.\n\n\nNeed of this blog\n\n\nThere are a lot of places where tech noobs spread fake information and facts. Herein I try to be as specific as I can about the stuff I write so I don't make the noob mistakes. All the information that I present here is totally according to my experience since I have done all of them individually I can only vouch for their applicability to a limited extent and would be happy to help in case of difficulties.",
            "title": "Home"
        },
        {
            "location": "/#index-page",
            "text": "",
            "title": "Index Page"
        },
        {
            "location": "/#introduction",
            "text": "This page can be summed up in two lines:   Linux is a cruel mistress and Embedded\nLinux is that bitch after a break up   If you understand the above quoate then let's start digging up some  Linux Gold , and if you have not then this is not the right place for you please do yourself a favour and readup on Linux and it's relatives and come back with a  stronger will .",
            "title": "Introduction"
        },
        {
            "location": "/#need-of-this-blog",
            "text": "There are a lot of places where tech noobs spread fake information and facts. Herein I try to be as specific as I can about the stuff I write so I don't make the noob mistakes. All the information that I present here is totally according to my experience since I have done all of them individually I can only vouch for their applicability to a limited extent and would be happy to help in case of difficulties.",
            "title": "Need of this blog"
        },
        {
            "location": "/Booting/BIOS_UEFI/",
            "text": "BIOS\n\n\nThe Basic Input/Output System (\nBIOS\n) is a firmware interface that controls not only the first step of the boot process, but also provides the lowest level interface to peripheral devices.\n\n\nBoot Process\n\n\n\n\nWhen the system boots, the processor looks at the \nend of system memory\n for the \nBIOS program\n, and runs it. \n\n\nBIOS\n onducts \nPOST\n(Power On Self Test).\n\n\nFetches \nMBR\n(Master Boot Record) from first sector of memory. \nMBR\n is \n512 bytes\n in size \n\n\nMBR\n contains machine code instructions for booting the machine, called a boot loader, along with the partition table.\n\n\nBIOS\n loads \nBootloader\n in \nRAM\n, the control is passed to \nBootloader\n after the \nBIOS\n loads it.\n\n\nFirst-stage bootloader\n is a small machine code binary on the MBR. Its sole job is to locate the second stage boot loader (GRUB) and load the first part of it into memory. \n\n\n\n\nLimitations\n\n\n\n\nBIOS\n can boot from only drives of less than or equal to \n2 TB\n.\n\n\nIt can't initialize multiple hardware devices at once leading to slow boot processes.\n\n\n\n\nUEFI\n\n\nThe \nUnified Extensible Firmware Interface (UEFI)\n is designed, like BIOS, to control the boot process (through boot services) and to provide an interface between system firmware and an operating system (through runtime services). Unlike BIOS, it features its own architecture, independent of the CPU, and its own device drivers. UEFI can mount partitions and read certain file systems. \n\n\nBoot Process\n\n\n\n\n\n\nWhen an x86 computer equipped with UEFI boots, the interface searches the system storage for a partition labeled with a specific \nglobally unique identifier (GUID)\n that marks it as the \nEFI System Partition (ESP)\n.\n\n\n\n\n\n\nThis partition contains \napplications compiled for the EFI architecture\n, which might include bootloaders for operating systems and utility software.\nUEFI systems include an \nEFI boot manager\n that can boot the system from a default configuration, or prompt a user to choose an operating system to boot. When a bootloader is selected, manually or automatically, UEFI reads it into memory and yields control of the boot process to it. \n\n\n\n\n\n\nIf everything works out fine it boots but if it fails it falls back to \nBIOS type booting\n which is known as the \nLegacy Boot Mode\n.\n\n\n\n\n\n\nAdvantages Over BIOS\n\n\n\n\nNo limitation over size anytime soon due to \n64-bit\n entries in \nGPT\n.\n\n\nUI is better (Needs to be explained a better)\n\n\nProvides \nSecure Boot\n feature which has been discussed below.\n\n\n\n\nSecure Boot",
            "title": "BIOS & UEFI"
        },
        {
            "location": "/Booting/BIOS_UEFI/#bios",
            "text": "The Basic Input/Output System ( BIOS ) is a firmware interface that controls not only the first step of the boot process, but also provides the lowest level interface to peripheral devices.",
            "title": "BIOS"
        },
        {
            "location": "/Booting/BIOS_UEFI/#boot-process",
            "text": "When the system boots, the processor looks at the  end of system memory  for the  BIOS program , and runs it.   BIOS  onducts  POST (Power On Self Test).  Fetches  MBR (Master Boot Record) from first sector of memory.  MBR  is  512 bytes  in size   MBR  contains machine code instructions for booting the machine, called a boot loader, along with the partition table.  BIOS  loads  Bootloader  in  RAM , the control is passed to  Bootloader  after the  BIOS  loads it.  First-stage bootloader  is a small machine code binary on the MBR. Its sole job is to locate the second stage boot loader (GRUB) and load the first part of it into memory.",
            "title": "Boot Process"
        },
        {
            "location": "/Booting/BIOS_UEFI/#limitations",
            "text": "BIOS  can boot from only drives of less than or equal to  2 TB .  It can't initialize multiple hardware devices at once leading to slow boot processes.",
            "title": "Limitations"
        },
        {
            "location": "/Booting/BIOS_UEFI/#uefi",
            "text": "The  Unified Extensible Firmware Interface (UEFI)  is designed, like BIOS, to control the boot process (through boot services) and to provide an interface between system firmware and an operating system (through runtime services). Unlike BIOS, it features its own architecture, independent of the CPU, and its own device drivers. UEFI can mount partitions and read certain file systems.",
            "title": "UEFI"
        },
        {
            "location": "/Booting/BIOS_UEFI/#boot-process_1",
            "text": "When an x86 computer equipped with UEFI boots, the interface searches the system storage for a partition labeled with a specific  globally unique identifier (GUID)  that marks it as the  EFI System Partition (ESP) .    This partition contains  applications compiled for the EFI architecture , which might include bootloaders for operating systems and utility software.\nUEFI systems include an  EFI boot manager  that can boot the system from a default configuration, or prompt a user to choose an operating system to boot. When a bootloader is selected, manually or automatically, UEFI reads it into memory and yields control of the boot process to it.     If everything works out fine it boots but if it fails it falls back to  BIOS type booting  which is known as the  Legacy Boot Mode .",
            "title": "Boot Process"
        },
        {
            "location": "/Booting/BIOS_UEFI/#advantages-over-bios",
            "text": "No limitation over size anytime soon due to  64-bit  entries in  GPT .  UI is better (Needs to be explained a better)  Provides  Secure Boot  feature which has been discussed below.",
            "title": "Advantages Over BIOS"
        },
        {
            "location": "/Booting/BIOS_UEFI/#secure-boot",
            "text": "",
            "title": "Secure Boot"
        },
        {
            "location": "/Tools/make_tools/",
            "text": "Make tools rediscovered\n\n\nUseful Link",
            "title": "Make Tools"
        },
        {
            "location": "/Tools/make_tools/#make-tools-rediscovered",
            "text": "Useful Link",
            "title": "Make tools rediscovered"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nOther Blogs\n\n\n\n\nMy game of life : \nTime\n\n\n\n\nOther Profiles\n\n\n\n\nGithub\n\n\n\n\nMe\n\n\nHi there,\n\nI am Prathu Baronia(alias:praton)\nFifth Year Undergraduate\nEmbedded Linux Researcher at AJIT Research Group\nIIT Bombay, India\n\n\n\n\nPast Work Experiences\n\n\n\n\nEmbedded System Engineer at Greetude Energy Systems (May'14 - Jul'14)\n\n\n\n\nContact Info\n\n\n\n\nIITB Homepage\n\n\nPersonal email",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/about/#other-blogs",
            "text": "My game of life :  Time",
            "title": "Other Blogs"
        },
        {
            "location": "/about/#other-profiles",
            "text": "Github",
            "title": "Other Profiles"
        },
        {
            "location": "/about/#me",
            "text": "Hi there,\n\nI am Prathu Baronia(alias:praton)\nFifth Year Undergraduate\nEmbedded Linux Researcher at AJIT Research Group\nIIT Bombay, India  Past Work Experiences   Embedded System Engineer at Greetude Energy Systems (May'14 - Jul'14)",
            "title": "Me"
        },
        {
            "location": "/about/#contact-info",
            "text": "IITB Homepage  Personal email",
            "title": "Contact Info"
        }
    ]
}